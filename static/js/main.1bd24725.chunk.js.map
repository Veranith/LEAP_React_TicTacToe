{"version":3,"sources":["ai.js","index.js"],"names":["newState","squares","action","player","newSquares","slice","getTerminalScore","terminalState","console","log","possibleMoves","moves","map","index","push","minValue","calculateWinner","score","Infinity","forEach","Math","min","maxValue","max","Square","props","className","onClick","value","Board","i","this","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","length","setState","concat","step","newAction","bestAction","maxScore","move","minScore","minimax","handleClick","status","current","winner","desc","jumpTo","AIMove","lines","a","b","c","indexOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bd24725.chunk.js","sourcesContent":["import { calculateWinner } from \"./index\";\r\n\r\n/**\r\n * minimax algorithm. Finds the best possible move for the current player\r\n * @param {array} squares game board array\r\n * @param {boolean} xIsNext current player\r\n * @returns {number} index of best possible move\r\n */\r\nexport function minimax(squares, xIsNext) {\r\n  const moves = possibleMoves(squares);\r\n  let bestAction;\r\n\r\n  if (xIsNext) {\r\n    let maxScore = -Infinity;\r\n    moves.forEach((move) => {\r\n      const newSquares = newState(squares, move, \"X\");\r\n      let score = minValue(newSquares);\r\n      if (score > maxScore) {\r\n        maxScore = score;\r\n        bestAction = move;\r\n      }\r\n    });\r\n  } else {\r\n    let minScore = Infinity;\r\n    moves.forEach((move) => {\r\n      const newSquares = newState(squares, move, \"O\");\r\n      let score = maxValue(newSquares);\r\n      if (score < minScore) {\r\n        minScore = score;\r\n        bestAction = move;\r\n      }\r\n    });\r\n  }\r\n  return bestAction;\r\n}\r\n\r\n/**\r\n * Generates new gameboard with the selected action taken.\r\n * @param {array} squares Game board array\r\n * @param {number} action game board index of next action\r\n * @param {string} player player (X or O)\r\n * @returns {array} new gameboard\r\n */\r\nfunction newState(squares, action, player) {\r\n  const newSquares = squares.slice();\r\n  newSquares[action] = player;\r\n  return newSquares;\r\n}\r\n\r\n/**\r\n *  This function calculates the value of of a game board in a terminal state\r\n * @param {string} terminalState result from calculate winner\r\n * @returns 1 for X win, 0 for draw, -1 for O win\r\n */\r\nfunction getTerminalScore(terminalState) {\r\n  switch (terminalState) {\r\n    case \"X\":\r\n      return 1;\r\n    case \"O\":\r\n      return -1;\r\n    case \"Draw\":\r\n      return 0;\r\n\r\n    default:\r\n      console.log(\"Error, unmatched switch in terminal score\");\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * Calculates an array of possible moves from the game board.\r\n * @param squares game board array\r\n * @returns new list with indexes of possible moves.\r\n */\r\nfunction possibleMoves(squares) {\r\n  const moves = [];\r\n  squares.map((player, index) => {\r\n    if (player === null) {\r\n      moves.push(index);\r\n    }\r\n    return null;\r\n  });\r\n  return moves;\r\n}\r\n\r\n/**\r\n * Subfunction of minimax, finds the lowest possible score for the remaining moves\r\n * @param {array} squares Game Board\r\n * @returns number\r\n */\r\nfunction minValue(squares) {\r\n  const terminalState = calculateWinner(squares);\r\n  if (terminalState !== null) {\r\n    return getTerminalScore(terminalState);\r\n  }\r\n  const moves = possibleMoves(squares);\r\n  let score = Infinity;\r\n  moves.forEach((action) => {\r\n    const newSquares = newState(squares, action, \"O\");\r\n    score = Math.min(score, maxValue(newSquares));\r\n  });\r\n  return score;\r\n}\r\n\r\n/**\r\n * Subfunction of minimax, finds the highest possible score for the remaining moves\r\n * @param {array} squares Game Board\r\n * @returns number\r\n */\r\nfunction maxValue(squares) {\r\n  const terminalState = calculateWinner(squares);\r\n  if (terminalState !== null) {\r\n    return getTerminalScore(terminalState);\r\n  }\r\n  const moves = possibleMoves(squares);\r\n  let score = -Infinity;\r\n  moves.forEach((action) => {\r\n    const newSquares = newState(squares, action, \"X\");\r\n    score = Math.max(score, minValue(newSquares));\r\n  });\r\n  return score;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { minimax } from \"./ai\";\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  AIMove(props) {\r\n    const current = this.state.history[this.state.stepNumber];\r\n    let newAction = minimax(current.squares, this.state.xIsNext);\r\n\r\n    console.log(\"AI move: \" + newAction);\r\n    this.handleClick(newAction);\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <div>\r\n            <button onClick={() => this.AIMove()}>AI Move</button>\r\n          </div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nexport function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  if (squares.indexOf(null) > -1) {\r\n    return null;\r\n  } else {\r\n    return \"Draw\";\r\n  }\r\n}\r\n"],"sourceRoot":""}